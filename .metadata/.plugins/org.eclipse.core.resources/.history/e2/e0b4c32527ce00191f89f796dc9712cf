package com.demo.bankapp.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.demo.bankapp.dao.AccountDAO;
import com.demo.bankapp.dao.TransactionDAO;
import com.demo.bankapp.dao.UserDAO;
import com.demo.bankapp.model.Transaction;
import com.demo.bankapp.model.User;

@RestController
@RequestMapping("/bank")
public class TransactionController {
	
	@Autowired
	TransactionDAO transactionDAO;
	
	@Autowired
	AccountDAO accountDAO;
	
	@PostMapping("/transactions")
	public Transaction createTransaction(@Valid @RequestBody Transaction trans) {
		
		return transactionDAO.save(trans);
	}
	
	@GetMapping("/transactions")
	public List<Transaction> getAllTransactions(){
		return transactionDAO.findAll();
	}
	
	@GetMapping("/transactions/{id}")
	public ResponseEntity<Transaction> getUserById(@PathVariable(value="id") Long transId){
		Transaction trans = transactionDAO.findOne(transId);
		
		if(trans==null) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok().body(trans);
	}
	
//	@PutMapping("/transactions/{id}")
//	public ResponseEntity<Transaction> updateUser(@PathVariable(value="id") Long transId, @Valid @RequestBody Transaction transDetails){
//		Transaction trans = transactionDAO.findOne(transId);
//		
//		if(trans==null) {
//			return ResponseEntity.notFound().build();
//		}
//		
//		trans.setAccountNo(transDetails.getAccountNo());
//		usr.setName(usrDetails.getName());
//		
//		User updateUser = userDAO.save(usr);
//		
//		return ResponseEntity.ok().body(updateUser);
//	}
	
//	@DeleteMapping("/users/{id}")
//	public ResponseEntity<User> deleteUser(@PathVariable(value="id") Long usrId){
//		User usr = userDAO.findOne(usrId);
//		
//		if(usr==null) {
//			return ResponseEntity.notFound().build();
//		}
//		userDAO.delete(usr);
//		return ResponseEntity.ok().build(); 
//	}


}
